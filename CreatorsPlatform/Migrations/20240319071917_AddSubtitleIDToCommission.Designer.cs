// <auto-generated />
using System;
using CreatorsPlatform.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CreatorsPlatform.Migrations
{
    [DbContext(typeof(ImaginkContext))]
    [Migration("20240319071917_AddSubtitleIDToCommission")]
    partial class AddSubtitleIDToCommission
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CreatorsPlatform.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Categori__19093A2B66E41C26");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Comment1")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Comment");

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__C3B4DFAAD1800B14");

                    b.HasIndex("ContentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.CommentResponse", b =>
                {
                    b.Property<int>("CommentResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentResponseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentResponseId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CommentResponseId")
                        .HasName("PK__CommentR__41BC2FBF68EB0A06");

                    b.HasIndex("CommentId");

                    b.HasIndex("ContentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentResponses");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Commission", b =>
                {
                    b.Property<int>("CommissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommissionId"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateOnly?>("OverDate")
                        .HasColumnType("date");

                    b.Property<int?>("PriceMax")
                        .HasColumnType("int");

                    b.Property<int>("PriceMin")
                        .HasColumnType("int");

                    b.Property<DateOnly>("PutUpDate")
                        .HasColumnType("date");

                    b.Property<int>("SubtitleId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CommissionId")
                        .HasName("PK__Commissi__6C2C8CEC19A627C3");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UserId");

                    b.ToTable("Commissions");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.CommissionImage", b =>
                {
                    b.Property<int>("CommissionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommissionImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommissionImageId"));

                    b.Property<int>("CommissionId")
                        .HasColumnType("int")
                        .HasColumnName("CommissionID");

                    b.Property<byte[]>("ImageUrl")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("ImageURL");

                    b.HasKey("CommissionImageId")
                        .HasName("PK__Commissi__9C714FFEB1239DCE");

                    b.HasIndex("CommissionId");

                    b.ToTable("CommissionImages");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.CommissionOrder", b =>
                {
                    b.Property<int>("CommissionOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommissionOrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommissionOrderId"));

                    b.Property<int>("CommissionId")
                        .HasColumnType("int")
                        .HasColumnName("CommissionID");

                    b.Property<DateOnly?>("DeadlineDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("WorkStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CommissionOrderId")
                        .HasName("PK__Commissi__F3359E7398ACB25F");

                    b.HasIndex("CommissionId");

                    b.ToTable("CommissionOrders");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("CommissionId")
                        .HasColumnType("int")
                        .HasColumnName("CommissionID");

                    b.Property<bool?>("CommissionSample")
                        .HasColumnType("bit");

                    b.Property<int?>("ContentPrice")
                        .HasColumnType("int");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    b.Property<bool?>("EventSample")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("ImageURL");

                    b.Property<int?>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("NumsInStock")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    b.Property<DateTime?>("PullOffDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubtitleId")
                        .HasColumnType("int")
                        .HasColumnName("SubtitleID");

                    b.Property<int?>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ContentId")
                        .HasName("PK__Contents__2907A87E585570FC");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CommissionId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EventId");

                    b.HasIndex("PlanId");

                    b.HasIndex("SubtitleId");

                    b.HasIndex("TagId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Creator", b =>
                {
                    b.Property<int>("CreatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CreatorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreatorId"));

                    b.Property<byte[]>("BangerUrl")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("BangerURL");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CreatorId")
                        .HasName("PK__Creators__6C7548111D29706E");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EventStyle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("EventUrl")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("EventURL");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("EventId")
                        .HasName("PK__Events__7944C87015B57FAF");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.EventImage", b =>
                {
                    b.Property<int>("EventImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EventImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventImageId"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorID");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    b.Property<bool?>("ImageSample")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ImageUrl")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("ImageURL");

                    b.HasKey("EventImageId")
                        .HasName("PK__EventIma__9B3A6940E9049B02");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EventId");

                    b.ToTable("EventImages");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.FriendList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcceptorUserId")
                        .HasColumnType("int")
                        .HasColumnName("AcceptorUserID");

                    b.Property<bool>("FriendRelations")
                        .HasColumnType("bit");

                    b.Property<int>("RequesterUserId")
                        .HasColumnType("int")
                        .HasColumnName("RequesterUserID");

                    b.HasKey("Id")
                        .HasName("PK__FriendLi__3214EC2717DC78BB");

                    b.HasIndex("AcceptorUserId");

                    b.HasIndex("RequesterUserId");

                    b.ToTable("FriendLists");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorID");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateOnly?>("PlanDate")
                        .HasColumnType("date");

                    b.Property<int?>("PlanLevel")
                        .HasColumnType("int");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PlanPrice")
                        .HasColumnType("int");

                    b.HasKey("PlanId")
                        .HasName("PK__Plans__755C22D7617F78FB");

                    b.HasIndex("CreatorId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorID");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("PaymentMade")
                        .HasColumnType("bit");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SubscriptionId")
                        .HasName("PK__Subscrip__9A2B24BDD2252C05");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Subtitle", b =>
                {
                    b.Property<int>("SubtitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubtitleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubtitleId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("SubtitleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SubtitleId")
                        .HasName("PK__Subtitle__A442F915E502DF79");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subtitles");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TagId")
                        .HasName("PK__Tags__657CFA4CBEA41F21");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateOnly?>("BirthdayDate")
                        .HasColumnType("date");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EMail");

                    b.Property<bool?>("EmailCertification")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC6C448E9F");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Comment", b =>
                {
                    b.HasOne("CreatorsPlatform.Models.Content", "Content")
                        .WithMany("Comments")
                        .HasForeignKey("ContentId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__Conten__07C12930");

                    b.HasOne("CreatorsPlatform.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__UserID__06CD04F7");

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.CommentResponse", b =>
                {
                    b.HasOne("CreatorsPlatform.Models.Comment", "Comment")
                        .WithMany("CommentResponses")
                        .HasForeignKey("CommentId")
                        .IsRequired()
                        .HasConstraintName("FK__CommentRe__Comme__0C85DE4D");

                    b.HasOne("CreatorsPlatform.Models.Content", "Content")
                        .WithMany("CommentResponses")
                        .HasForeignKey("ContentId")
                        .IsRequired()
                        .HasConstraintName("FK__CommentRe__Conte__0B91BA14");

                    b.HasOne("CreatorsPlatform.Models.User", "User")
                        .WithMany("CommentResponses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__CommentRe__UserI__0A9D95DB");

                    b.Navigation("Comment");

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Commission", b =>
                {
                    b.HasOne("CreatorsPlatform.Models.Creator", "Creator")
                        .WithMany("Commissions")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("FK__Commissio__Creat__5812160E");

                    b.HasOne("CreatorsPlatform.Models.User", "User")
                        .WithMany("Commissions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Commissio__UserI__59063A47");

                    b.Navigation("Creator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.CommissionImage", b =>
                {
                    b.HasOne("CreatorsPlatform.Models.Commission", "Commission")
                        .WithMany("CommissionImages")
                        .HasForeignKey("CommissionId")
                        .IsRequired()
                        .HasConstraintName("FK__Commissio__Commi__19DFD96B");

                    b.Navigation("Commission");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.CommissionOrder", b =>
                {
                    b.HasOne("CreatorsPlatform.Models.Commission", "Commission")
                        .WithMany("CommissionOrders")
                        .HasForeignKey("CommissionId")
                        .IsRequired()
                        .HasConstraintName("FK__Commissio__Commi__59FA5E80");

                    b.Navigation("Commission");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Content", b =>
                {
                    b.HasOne("CreatorsPlatform.Models.Category", "Category")
                        .WithMany("Contents")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Contents__Catego__534D60F1");

                    b.HasOne("CreatorsPlatform.Models.Commission", "Commission")
                        .WithMany("Contents")
                        .HasForeignKey("CommissionId")
                        .HasConstraintName("FK__Contents__Commis__656C112C");

                    b.HasOne("CreatorsPlatform.Models.Creator", "Creator")
                        .WithMany("Contents")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("FK__Contents__Creato__5629CD9C");

                    b.HasOne("CreatorsPlatform.Models.Event", "Event")
                        .WithMany("Contents")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK__Contents__EventI__6477ECF3");

                    b.HasOne("CreatorsPlatform.Models.Plan", "Plan")
                        .WithMany("Contents")
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("FK__Contents__PlanID__571DF1D5");

                    b.HasOne("CreatorsPlatform.Models.Subtitle", "Subtitle")
                        .WithMany("Contents")
                        .HasForeignKey("SubtitleId")
                        .HasConstraintName("FK__Contents__Subtit__5441852A");

                    b.HasOne("CreatorsPlatform.Models.Tag", "Tag")
                        .WithMany("Contents")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK__Contents__TagID__5535A963");

                    b.Navigation("Category");

                    b.Navigation("Commission");

                    b.Navigation("Creator");

                    b.Navigation("Event");

                    b.Navigation("Plan");

                    b.Navigation("Subtitle");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Event", b =>
                {
                    b.HasOne("CreatorsPlatform.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Events__Category__5EBF139D");

                    b.HasOne("CreatorsPlatform.Models.Creator", "Creator")
                        .WithMany("Events")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK__Events__CreatorI__3493CFA7");

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.EventImage", b =>
                {
                    b.HasOne("CreatorsPlatform.Models.Creator", "Creator")
                        .WithMany("EventImages")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("FK__EventImag__Creat__3587F3E0");

                    b.HasOne("CreatorsPlatform.Models.Event", "Event")
                        .WithMany("EventImages")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK__EventImag__Event__6383C8BA");

                    b.Navigation("Creator");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.FriendList", b =>
                {
                    b.HasOne("CreatorsPlatform.Models.User", "AcceptorUser")
                        .WithMany("FriendListAcceptorUsers")
                        .HasForeignKey("AcceptorUserId")
                        .IsRequired()
                        .HasConstraintName("FK__FriendLis__Accep__60A75C0F");

                    b.HasOne("CreatorsPlatform.Models.User", "RequesterUser")
                        .WithMany("FriendListRequesterUsers")
                        .HasForeignKey("RequesterUserId")
                        .IsRequired()
                        .HasConstraintName("FK__FriendLis__Reque__5FB337D6");

                    b.Navigation("AcceptorUser");

                    b.Navigation("RequesterUser");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Plan", b =>
                {
                    b.HasOne("CreatorsPlatform.Models.Creator", "Creator")
                        .WithMany("Plans")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("FK__Plans__CreatorID__5DCAEF64");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Subscription", b =>
                {
                    b.HasOne("CreatorsPlatform.Models.Category", "Category")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Subscript__Categ__5AEE82B9");

                    b.HasOne("CreatorsPlatform.Models.Creator", "Creator")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("FK__Subscript__Creat__5BE2A6F2");

                    b.HasOne("CreatorsPlatform.Models.Plan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("FK__Subscript__PlanI__367C1819");

                    b.HasOne("CreatorsPlatform.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Subscript__UserI__5CD6CB2B");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Subtitle", b =>
                {
                    b.HasOne("CreatorsPlatform.Models.Category", "Category")
                        .WithMany("Subtitles")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Subtitles__Categ__628FA481");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Tag", b =>
                {
                    b.HasOne("CreatorsPlatform.Models.Category", "Category")
                        .WithMany("Tags")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Tags__CategoryID__619B8048");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.User", b =>
                {
                    b.HasOne("CreatorsPlatform.Models.Category", "Category")
                        .WithMany("Users")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Users__CategoryI__52593CB8");

                    b.HasOne("CreatorsPlatform.Models.Creator", "Creator")
                        .WithMany("Users")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK__Users__CreatorID__5165187F");

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Category", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("Events");

                    b.Navigation("Subscriptions");

                    b.Navigation("Subtitles");

                    b.Navigation("Tags");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Comment", b =>
                {
                    b.Navigation("CommentResponses");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Commission", b =>
                {
                    b.Navigation("CommissionImages");

                    b.Navigation("CommissionOrders");

                    b.Navigation("Contents");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Content", b =>
                {
                    b.Navigation("CommentResponses");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Creator", b =>
                {
                    b.Navigation("Commissions");

                    b.Navigation("Contents");

                    b.Navigation("EventImages");

                    b.Navigation("Events");

                    b.Navigation("Plans");

                    b.Navigation("Subscriptions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Event", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("EventImages");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Plan", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Subtitle", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.Tag", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("CreatorsPlatform.Models.User", b =>
                {
                    b.Navigation("CommentResponses");

                    b.Navigation("Comments");

                    b.Navigation("Commissions");

                    b.Navigation("FriendListAcceptorUsers");

                    b.Navigation("FriendListRequesterUsers");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
